#!/usr/bin/env bash
# Git pre-commit hook, that will automagically lint your code.
# Author: Mpho Mphego <mpho112@gmail.com>

# set -e
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
NORMAL=$(tput sgr0)

# Allows us to read user input below, assigns stdin to keyboard
exec < /dev/tty

######### PRINT GREEN STD ##################
function gprint (){
    printf "%s$1%s\n" "${GREEN}" "${NORMAL}";
}

######### PRINT RED STD ##################
function rprint (){
    printf "%s$1%s\n" "${RED}" "${NORMAL}";
}

# Find all staged files
PYTHON_FILES=$(git diff --name-only --cached --diff-filter=AM | grep --color=never '.py$')
SHELL_FILES=$(git diff --name-only --cached --diff-filter=AM | grep --color=never '.sh$')
DOCKER_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -e '\Docker*' | sed 's@.*/@@')

if git rev-parse --abbrev-ref HEAD | grep -e 'master' > /dev/null 2>&1; then
    rprint "Please switch to another branch other than master";
    rprint "You can by-pass this hook by appending -n or --no-verify";
    rprint "eg: git commit -a --no-verify";
    rprint " -----------NOT RECOMMENDED-----------";
    exit 1
fi

# ########## PIP VERSION #############
# # Verify that black is installed; if not, warn and exit.
# if ! command -v black >/dev/null; then
#   rprint 'black not on path; can not format. Please install black:'
#   rprint '  python3 -m pip install black # Ensure that it is installed using python3.6+'
#   exit 2
# fi

# Verify that flake8 is installed; if not, warn and exit.
if ! command -v flake8 >/dev/null; then
  rprint 'flake8 not on path; can not format. Please install black:'
  rprint '  pip install flake8'
  exit 2
fi
######### END PIP VERSION ##########

########## SHELLCHECK VERSION ############
# Verify that shellcheck is installed; if not, warn and exit.
if ! command -v shellcheck >/dev/null ; then
  rprint 'shellcheck not on path; can not format. Please install shellcheck:'
  rprint '  `apt-get install shellcheck`'
  exit 2
fi
######### END SHELLCHECK VERSION #########

########## DOCKERFILE VERSION ############
# Verify that docker is installed; if not, warn and exit.
if ! command -v docker >/dev/null ; then
  rprint 'docker not on path; can not format. Please install docker:'
  rprint '  `apt-get install docker-ce`'
  exit 2
fi
######### END DOCKERFILE VERSION #########


#/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*

gprint "Checking files for syntax errors\n"
# Python Files
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -e '\.py$'); do
    $(command -v pycompile) "${file}";
    if ! $(command -v flake8) "${file}" --max-line-length=100 --ignore=E501,E303,F405,F403,E128,E265 \
        --count > /dev/null 2>&1; then
        rprint "${file} linting Failed!";
        rprint "Will automagically make the fixes"
        if [ ! $(command -v black) ]; then
            $(which black) -l 120 -v --fast "${file}"
        else
            exit 1;
        fi
    fi
done

# Shell scripts
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -e '\.sh$'); do
    if [ -f "$(command -v shellcheck)" ]; then
        if ! shellcheck "${file}"; then
            rprint "${file} linting Failed!";
            exit 1;
        fi
    fi
done

# Dockerfiles
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -e '\Docker*'); do
    if [ -f "$(command -v docker)" ]; then
        if ! "$(command -v docker)" run --rm -i hadolint/hadolint < "${file}"; then
            rprint "${file} linting Failed!";
            exit 1;
        fi
    fi
done
