#!/usr/bin/env bash
# Git pre-commit hook, that will automagically lint your code.
# Author: Mpho Mphego <mpho112@gmail.com>

# set -e
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
NORMAL=$(tput sgr0)

# Allows us to read user input below, assigns stdin to keyboard
exec < /dev/tty

######### PRINT GREEN STD ##################
function gprint (){
    echo "${GREEN}$1${NORMAL}";
}

######### PRINT RED STD ##################
function rprint (){
    echo "${RED}$1${NORMAL}";
}

# # Find all staged files
# PYTHON_FILES=$(git diff --name-only --cached --diff-filter=AM | grep --color=never '.py$')
# MARKDOWN_FILES=$(git diff --name-only --cached --diff-filter=AM | grep --color=never '.md$')
# YAML_FILES=$(git diff --name-only --cached --diff-filter=AM | grep --color=never '.tex$')
# YAML_FILES=$(git diff --name-only --cached --diff-filter=AM | grep --color=never '.yml$')
# CPP_FILES=$(git diff --name-only --cached --diff-filter=AM | grep --color=never '.c$')
# DOCKER_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -e '\Docker*' | sed 's@.*/@@')

if git rev-parse --abbrev-ref HEAD | grep -e 'master' > /dev/null 2>&1; then
    rprint "Please switch to another branch other than master";
    rprint "You can by-pass this hook by appending -n or --no-verify";
    rprint "eg: git commit -a --no-verify";
    rprint " -----------NOT RECOMMENDED-----------";
    exit 1
fi

# ########## PYTHON LINTERS #############

# Verify that flake8 is installed; if not, warn and exit.
if ! command -v flake8 >/dev/null; then
  rprint 'flake8 not on path; can not format. Please install flake8:'
  rprint '  pip install flake8'
  exit 2
fi

# Verify that yamllint is installed; if not, warn and exit.
if ! command -v yamllint >/dev/null; then
  rprint 'yamllint not on path; can not format. Please install yamllint:'
  rprint '  pip install yamllint'
  exit 2
fi

# Verify that cpplint is installed; if not, warn and exit.
if ! command -v cpplint >/dev/null; then
  rprint 'cpplint not on path; can not format. Please install cpplint:'
  rprint '  pip install cpplint'
  exit 2
fi

######### END PYTHON LINTER ##########


########## APT VERSION ############
# Verify that shellcheck is installed; if not, warn and exit.
if ! command -v shellcheck >/dev/null ; then
  rprint 'shellcheck not on path; can not format. Please install shellcheck:'
  rprint '  `apt-get install shellcheck`'
  rprint 'or run:>> docker run -v "$PWD:/mnt" koalaman/shellcheck'
  exit 2
fi

# Verify that chktex is installed; if not, warn and exit.
if ! command -v chktex >/dev/null ; then
  rprint 'chktex not on path; can not format. Please install chktex:'
  rprint '  `apt-get install chktex`'
  exit 2
fi
######### END APT VERSION #########


########## DOCKERFILE VERSION ############
# Verify that docker is installed; if not, warn and exit.
if ! command -v docker >/dev/null ; then
  rprint 'docker not on path; can not format. Please install docker:'
  rprint '  `apt-get install docker-ce`'
  exit 2
fi
######### END DOCKERFILE VERSION #########
#/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*/*

gprint "Checking files for syntax errors."

# Python Files
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -e '\.py$'); do
    if ! $(command -v pycompile) "${file}"; then
        rprint "${file} compile Failed!";
    fi

    if ! $(command -v flake8) "${file}" --max-line-length=100 --ignore=E501,E303,F405,F403,E128,E265; then
        rprint "${file} linting Failed!";
        exit 1;
    fi
done

# Shell scripts
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -e '\.sh$'); do
    if ! "$(command -v shellcheck)" "${file}"; then
        rprint "${file} linting Failed!";
        exit 1;
    fi
done

# latex files
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -e '\.tex$'); do
    if ! "$(command -v chktex)" "${file}"; then
        rprint "${file} linting Failed!";
        exit 1;
    fi
done

# Dockerfiles
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -e '\Docker*'); do
    if ! "$(command -v docker)" run --rm -i hadolint/hadolint < "${file}"; then
        rprint "${file} linting Failed!";
        exit 1;
    fi
done

# Markdown
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -e '\.md$'); do
    if ! "$(command -v docker)" run --rm -i mmphego/markdownlint "${file}"; then
        rprint "${file} linting Failed!";
        exit 1;
    fi
done

# yaml
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -e '\.yml$'); do
    if ! "$(command -v yamllint)" "${file}"; then
        rprint "${file} linting Failed!";
        exit 1;
    fi
done

# cpp
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -e '\.c$|\.cpp$'); do
    if ! "$(command -v cpplint)" "${file}"; then
        rprint "${file} linting Failed!";
        exit 1;
    fi
done
